#!/usr/bin/python

"""
	Currently this program is only setup to texify a list of items, specifically journal articles from the Arxiv. Hopefully, as time moves on, there will be greater functionality and this program will serve as a base class for texifying and creating pdf of other documents.



TO DO:

[]	Make a system directory automatically(if one has not already been created) to contain the files that are created during the tex file process.
		
[]	Provide implementation for various packages of TeX and LaTeX



"""



class Texify:

	def __init__(self, filename = "Test.txt", packages = [["amsmath",[]],[ "hyperref",[]]], docclass = "article", fontsize = 11):
		self.filename = filename

		try index = filename.rindex("."):
			filename[index:] = ""
			filename.join(".tex")
			self.texfile = filename
		except ValueError:
			raise Exception("use a valid filename dipshit")
		self.package = packages
		self.DoClass = docclass
		self.fontsize = str(fontsize) + "pt"
	
	def WriteFile(self):
		self.writeheader()
		self.copyover()
		self.writecloser()


	
	def writeheader(self):
		with open(self.texfile,'r+' ) as tex:
			tex.write("%This document was generated by John Andersen's texification python script. This script is in caveman-Alpha state, so please forgive the numerous errors. For further information, contact John at johnandersen185@gmail.com\n")
			tex.write(self.header)
		return


	def writecloser(self):
		with open(self.texfile,'r+') as tex:
			tex.seek(0,2)
			tex.write("\n\end{document}")
		return


	def copyover(self)
		with open(self.filename, 'r') as OG:
			for line in OG.readlines():
				with open(self.texfile, 'r+') as tex:
					tex.seek(0,2)
					line = self.hypperef(line)
					tex.write(line)
		return



	def hypperef(self, line):
		if "http" in line:
			line = "\href{"+line+"}{"+line+"}"
		return line

	def enumitem(self):
		

	def header(self):
		stdDocClass = "\documentclass{{0}}\n".format(self.docclass)
		pckgeListing = ""
		for i in range(len(self.package)):
			pckgeListing += "\usepackage"
			if self.package[i][1] not []:
				pckgeListing += "["
				for j in range(len(self.package[i][1])-1):
					pckgeListing += "{0} ,".format(self.package[i][1][j])
				pckgeListing += "{0}]".format(self.package[i][1][-1])
			"{{0}}\n".format(self.package[i][0])
		return(stdDocClass+pckgeListing)


if __name__ == "__main__":







